-- problems
-- 不能保证一个账户在一个支行开户，负责人就一定是这个支行的

-- MySQL Script generated by MySQL Workbench
-- Wed Jun 17 23:42:18 2020
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

-- SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
-- SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
-- SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema bankdbv0
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema bankdbv0
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `bankdbv0` DEFAULT CHARACTER SET utf8 ;
USE `bankdbv0` ;

-- -----------------------------------------------------
-- Table `bankdbv0`.`customer`
-- -----------------------------------------------------
-- CREATE TABLE IF NOT EXISTS `bankdbv0`.`customer` (
--   `custom_id` CHAR(18) NOT NULL,
--   `custom_name` VARCHAR(10) NOT NULL,
--   `custom_phone` CHAR(11) NOT NULL,
--   `custom_address` VARCHAR(100) NULL,
--   `contact_name` VARCHAR(10) NOT NULL,
--   `contact_phone` CHAR(11) NOT NULL,
--   `contact_email` VARCHAR(30) NULL,
--   `contact_custom_relation` VARCHAR(10) NOT NULL,
--   PRIMARY KEY (`custom_id`))
-- ENGINE = InnoDB;


-- add id column
CREATE TABLE IF NOT EXISTS `bankdbv0`.`customer` (
  `id` INT AUTO_INCREMENT NOT NULL,
  `custom_id` CHAR(18) NOT NULL,
  `custom_name` VARCHAR(10) NOT NULL,
  `custom_phone` CHAR(11) NOT NULL,
  `custom_address` VARCHAR(100) NULL,
  `contact_name` VARCHAR(10) NOT NULL,
  `contact_phone` CHAR(11) NOT NULL,
  `contact_email` VARCHAR(30) NULL,
  `contact_custom_relation` VARCHAR(10) NOT NULL,
  PRIMARY KEY (`id`),
  Constraint `UK_PRIMARYKEY_CUSTOMER`             -- add by cya
    Unique Key(`custom_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `bankdbv0`.`branch`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bankdbv0`.`branch` (
  `branch_name` VARCHAR(20) NOT NULL,
  `branch_assets` DOUBLE NOT NULL,
  `branch_city` VARCHAR(20) NOT NULL,
  PRIMARY KEY (`branch_name`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `bankdbv0`.`department`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bankdbv0`.`department` (
  `department_id` CHAR(10) NOT NULL,
  `department_name` VARCHAR(20) NOT NULL,
  `department_type` VARCHAR(20) NULL,
  `manager_id` CHAR(18) NOT NULL,
  `branch_branch_name` VARCHAR(20) NOT NULL,
  PRIMARY KEY (`department_id`),
  INDEX `fk_department_branch_idx` (`branch_branch_name` ASC) VISIBLE,
  CONSTRAINT `fk_department_branch`
    FOREIGN KEY (`branch_branch_name`)
    REFERENCES `bankdbv0`.`branch` (`branch_name`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `bankdbv0`.`staff`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bankdbv0`.`staff` (
  `staff_id` CHAR(18) NOT NULL,
  `staff_name` VARCHAR(10) NOT NULL,
  `staff_phone` CHAR(11) NOT NULL,
  `staff_address` VARCHAR(100) NULL,
  `staff_starttime` DATE NOT NULL,
  `staff_ismanager` CHAR(1) NOT NULL,
  `department_department_id` CHAR(10) NOT NULL,
  PRIMARY KEY (`staff_id`),
  INDEX `fk_staff_department1_idx` (`department_department_id` ASC) VISIBLE,
  CONSTRAINT `fk_staff_department1`
    FOREIGN KEY (`department_department_id`)
    REFERENCES `bankdbv0`.`department` (`department_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  Constraint `ck_staff_ismanager`   -- add by cya
    Check(`staff_ismanager` IN ('0','1')))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `bankdbv0`.`account`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bankdbv0`.`account` (
  `account_id` CHAR(6) NOT NULL,
  `account_balance` DOUBLE NOT NULL,
  `account_opendate` DATETIME NOT NULL,
  `account_type` VARCHAR(20) NOT NULL,
  `staff_staff_id` CHAR(18) NOT NULL,
  `branch_branch_name` VARCHAR(20) NOT NULL,
  PRIMARY KEY (`account_id`),
  INDEX `fk_account_staff1_idx` (`staff_staff_id` ASC) VISIBLE,
  INDEX `fk_account_branch1_idx` (`branch_branch_name` ASC) VISIBLE,
  CONSTRAINT `fk_account_staff1`
    FOREIGN KEY (`staff_staff_id`)
    REFERENCES `bankdbv0`.`staff` (`staff_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_account_branch1`
    FOREIGN KEY (`branch_branch_name`)
    REFERENCES `bankdbv0`.`branch` (`branch_name`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  Constraint `ck_account_account_type`   -- add by cya
    Check (`account_type` IN ('saveaccount','checkaccount')))
ENGINE = InnoDB;


-- generated by workbench
-- -----------------------------------------------------
-- Table `bankdbv0`.`customer_has_account`
-- -----------------------------------------------------
-- CREATE TABLE IF NOT EXISTS `bankdbv0`.`customer_has_account` (
--   `customer_custom_id` CHAR(18) NOT NULL,
--   `account_account_id` CHAR(6) NOT NULL,
--   `last_visit` DATETIME NOT NULL,
--   `belong_branch` VARCHAR(20) NULL,
--   `acc_type` VARCHAR(20) NOT NULL,
--   PRIMARY KEY (`customer_custom_id`, `account_account_id`),
--   INDEX `fk_customer_has_account_account1_idx` (`account_account_id` ASC) VISIBLE,
--   INDEX `fk_customer_has_account_customer1_idx` (`customer_custom_id` ASC) VISIBLE,
--   CONSTRAINT `fk_customer_has_account_customer1`
--     FOREIGN KEY (`customer_custom_id`)
--     REFERENCES `bankdbv0`.`customer` (`custom_id`)
--     ON DELETE NO ACTION
--     ON UPDATE CASCADE,                            -- modified by cya
--   CONSTRAINT `fk_customer_has_account_account1`
--     FOREIGN KEY (`account_account_id`)
--     REFERENCES `bankdbv0`.`account` (`account_id`)
--     ON DELETE CASCADE                             -- modified by cya ("NO ACTION" -> "CASCADE")
--     ON UPDATE NO ACTION,                          -- 账户号不允许修改
--   CONSTRAINT `fk_customer_has_account_branch1`    -- add by cya
--     FOREIGN KEY (`belong_branch`)
--     REFERENCES `bankdbv0`.`branch` (`branch_name`)
--     ON DELETE NO ACTION
--     ON UPDATE NO ACTION,
--   Constraint `ck_customer_has_account_acc_type`   -- add by cya
--     Check (`acc_type` IN ('saveaccount','checkaccount')),
--   Constraint `UK`                                 -- add by cya
--     Unique Key(`customer_custom_id`, `belong_branch`, `acc_type`))
-- ENGINE = InnoDB;


-- change to suit the django: add column id int auto_increment as primary key,
-- change previous primary key to unique check
-- -----------------------------------------------------
-- Table `bankdbv0`.`customer_has_account`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bankdbv0`.`customer_has_account` (
  `id` INT AUTO_INCREMENT NOT NULL,
  `customer_id` INT NOT NULL,
  `account_account_id` CHAR(6) NOT NULL,
  `last_visit` DATETIME NOT NULL,
  `belong_branch` VARCHAR(20) NULL,
  `acc_type` VARCHAR(20) NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_customer_has_account_account1_idx` (`account_account_id` ASC) VISIBLE,
  INDEX `fk_customer_has_account_customer1_idx` (`customer_id` ASC) VISIBLE,
  CONSTRAINT `fk_customer_has_account_customer1`
    FOREIGN KEY (`customer_id`)
    REFERENCES `bankdbv0`.`customer` (`id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,                          -- modified by cya
  CONSTRAINT `fk_customer_has_account_account1`
    FOREIGN KEY (`account_account_id`)
    REFERENCES `bankdbv0`.`account` (`account_id`)
    ON DELETE CASCADE                             -- modified by cya ("NO ACTION" -> "CASCADE")
    ON UPDATE NO ACTION,                          -- 账户号不允许修改
  CONSTRAINT `fk_customer_has_account_branch1`    -- add by cya
    FOREIGN KEY (`belong_branch`)
    REFERENCES `bankdbv0`.`branch` (`branch_name`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  Constraint `ck_customer_has_account_acc_type`   -- add by cya
    Check (`acc_type` IN ('saveaccount','checkaccount')),
  Constraint `UK_ACCOUNT_TYPE`                    -- add by cya
    Unique Key(`customer_id`, `belong_branch`, `acc_type`),
  Constraint `UK_PRIMARYKEY`                      -- add by cya
    Unique Key(`customer_id`, `account_account_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `bankdbv0`.`loan`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bankdbv0`.`loan` (
  `loan_id` CHAR(10) NOT NULL,
  `loan_money` DOUBLE NOT NULL,
  `loan_state` CHAR(1) NULL,
  `staff_staff_id` CHAR(18) NOT NULL,
  `branch_branch_name` VARCHAR(20) NOT NULL,
  PRIMARY KEY (`loan_id`),
  INDEX `fk_loan_staff1_idx` (`staff_staff_id` ASC) VISIBLE,
  INDEX `fk_loan_branch1_idx` (`branch_branch_name` ASC) VISIBLE,
  CONSTRAINT `fk_loan_staff1`
    FOREIGN KEY (`staff_staff_id`)
    REFERENCES `bankdbv0`.`staff` (`staff_id`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_loan_branch1`
    FOREIGN KEY (`branch_branch_name`)
    REFERENCES `bankdbv0`.`branch` (`branch_name`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  Constraint `ck_loan_state`                -- add by cya
    Check(`loan_state` IN ('0','1','2')))   -- 0: 未开始发放 1: 发放中 2: 发放完
ENGINE = InnoDB;


-- generated by workbench
-- -----------------------------------------------------
-- Table `bankdbv0`.`customer_has_loan`
-- -----------------------------------------------------
-- CREATE TABLE IF NOT EXISTS `bankdbv0`.`customer_has_loan` (
--   `customer_custom_id` CHAR(18) NOT NULL,
--   `loan_loan_id` CHAR(10) NOT NULL,
--   PRIMARY KEY (`customer_custom_id`, `loan_loan_id`),
--   INDEX `fk_customer_has_loan_loan1_idx` (`loan_loan_id` ASC) VISIBLE,
--   INDEX `fk_customer_has_loan_customer1_idx` (`customer_custom_id` ASC) VISIBLE,
--   CONSTRAINT `fk_customer_has_loan_customer1`
--     FOREIGN KEY (`customer_custom_id`)
--     REFERENCES `bankdbv0`.`customer` (`custom_id`)
--     ON DELETE NO ACTION
--     ON UPDATE CASCADE,            -- modified by cya
--   CONSTRAINT `fk_customer_has_loan_loan1`
--     FOREIGN KEY (`loan_loan_id`)
--     REFERENCES `bankdbv0`.`loan` (`loan_id`)
--     ON DELETE CASCADE             -- modified by cya
--     ON UPDATE NO ACTION)          -- 贷款信息添加成功后不允许修改
-- ENGINE = InnoDB;


-- change to suit the django: add column id int auto_increment as primary key,
-- change previous primary key to unique check
-- -----------------------------------------------------
-- Table `bankdbv0`.`customer_has_loan`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bankdbv0`.`customer_has_loan` (
  `id` INT AUTO_INCREMENT NOT NULL,
  `customer_id` INT NOT NULL,
  `loan_loan_id` CHAR(10) NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_customer_has_loan_loan1_idx` (`loan_loan_id` ASC) VISIBLE,
  INDEX `fk_customer_has_loan_customer1_idx` (`customer_id` ASC) VISIBLE,
  CONSTRAINT `fk_customer_has_loan_customer1`
    FOREIGN KEY (`customer_id`)
    REFERENCES `bankdbv0`.`customer` (`id`)
    ON DELETE NO ACTION
    ON UPDATE CASCADE,            -- modified by cya
  CONSTRAINT `fk_customer_has_loan_loan1`
    FOREIGN KEY (`loan_loan_id`)
    REFERENCES `bankdbv0`.`loan` (`loan_id`)
    ON DELETE CASCADE             -- modified by cya
    ON UPDATE NO ACTION,          -- 贷款信息添加成功后不允许修改
  Constraint `UK_PRIMARYKEY_LOAN`                 -- add by cya
    Unique Key(`customer_id`, `loan_loan_id`))
ENGINE = InnoDB;


-- generated by workbench
-- -----------------------------------------------------
-- Table `bankdbv0`.`pay_for_loan`
-- -----------------------------------------------------
-- CREATE TABLE IF NOT EXISTS `bankdbv0`.`pay_for_loan` (
--   `pay_id` CHAR(4) NOT NULL,
--   `pay_date` DATETIME NOT NULL,
--   `pay_account` DOUBLE NOT NULL,
--   `loan_loan_id` CHAR(10) NOT NULL,
--   PRIMARY KEY (`pay_id`, `loan_loan_id`),
--   INDEX `fk_pay_for_loan_loan1_idx` (`loan_loan_id` ASC) VISIBLE,
--   CONSTRAINT `fk_pay_for_loan_loan1`
--     FOREIGN KEY (`loan_loan_id`)
--     REFERENCES `bankdbv0`.`loan` (`loan_id`)
--     ON DELETE CASCADE             -- modified by cya
--     ON UPDATE NO ACTION)
-- ENGINE = InnoDB;


-- change to suit the django: add column id int auto_increment as primary key,
-- change previous primary key to unique check
-- -----------------------------------------------------
-- Table `bankdbv0`.`pay_for_loan`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bankdbv0`.`pay_for_loan` (
  `id` INT AUTO_INCREMENT NOT NULL,
  `pay_id` CHAR(4) NOT NULL,
  `pay_date` DATETIME NOT NULL,
  `pay_account` DOUBLE NOT NULL,  -- 本次付款的金额
  `loan_loan_id` CHAR(10) NOT NULL,
  PRIMARY KEY (`id`),
  INDEX `fk_pay_for_loan_loan1_idx` (`loan_loan_id` ASC) VISIBLE,
  CONSTRAINT `fk_pay_for_loan_loan1`
    FOREIGN KEY (`loan_loan_id`)
    REFERENCES `bankdbv0`.`loan` (`loan_id`)
    ON DELETE CASCADE             -- modified by cya
    ON UPDATE NO ACTION,
  Constraint `UK_PRIMARYKEY_PAY_LOAN`                 -- add by cya
    Unique Key(`pay_id`, `loan_loan_id`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `bankdbv0`.`savings_account`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bankdbv0`.`savings_account` (
  `interset_rate` FLOAT NOT NULL,
  `currency_type` CHAR(10) NOT NULL,
  `account_account_id` CHAR(6) NOT NULL,
  INDEX `fk_savings_account_account1_idx` (`account_account_id` ASC) VISIBLE,
  PRIMARY KEY (`account_account_id`),
  CONSTRAINT `fk_savings_account_account1`
    FOREIGN KEY (`account_account_id`)
    REFERENCES `bankdbv0`.`account` (`account_id`)
    ON DELETE CASCADE             -- modified by cya
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `bankdbv0`.`checking_account`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `bankdbv0`.`checking_account` (
  `credit_line` DOUBLE NOT NULL,
  `account_account_id` CHAR(6) NOT NULL,
  INDEX `fk_checking_account_account1_idx` (`account_account_id` ASC) VISIBLE,
  PRIMARY KEY (`account_account_id`),
  CONSTRAINT `fk_checking_account_account1`
    FOREIGN KEY (`account_account_id`)
    REFERENCES `bankdbv0`.`account` (`account_id`)
    ON DELETE CASCADE             -- modified by cya
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- SET SQL_MODE=@OLD_SQL_MODE;
-- SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
-- SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
